// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id        String       @id @default(uuid()) // Use UUID for id
  code      String       @unique
  title     String?
  status    TaskStatus
  label     TaskLabel
  priority  TaskPriority
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
}

// Enum definitions
enum TaskStatus {
  todo
  in_progress // Use snake_case or camelCase as appropriate
  done
  canceled
}

enum TaskLabel {
  bug
  feature
  enhancement
  documentation
}

enum TaskPriority {
  low
  medium
  high
}

enum Gender {
  male
  female
}

// District table
model District {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  code      String     @unique
  townships Township[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

// Township table
model Township {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  code        String    @unique
  karenNameEn String
  districtId  Int
  district    District  @relation(fields: [districtId], references: [id])
  vthcs       Vthc[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Vthc {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  code             String    @unique
  townshipCode     String // Foreign key reference to Township table
  townshipName     String?
  townshipNameMIMU String?
  townshipId       Int
  township         Township  @relation(fields: [townshipId], references: [id])
  villages         Village[]
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}

model Village {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  code     String  @unique
  vthcCode String
  vthcName String?
  vtch     Vthc    @relation(fields: [vthcCode], references: [code])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Country {
  id          Int        @id @default(autoincrement())
  countryName String?
  // Relations
  locations   Location[]
}

model Department {
  id         Int    @id @default(autoincrement())
  name       String
  managerId  Int?
  locationId Int?

  // Relations
  employees   Employee[]
  location    Location?    @relation(fields: [locationId], references: [id])
  jobHistorys JobHistory[]
}

model Employee {
  id                    Int       @id @default(autoincrement())
  name                  String?   @db.VarChar(20)
  email                 String    @db.VarChar(25)
  phoneNumber           String?   @db.VarChar(20)
  hireDate              DateTime  @db.Date
  jobId                 Int?
  salary                Float?
  commissionPct         Float?
  managerId             Int?
  departmentId          Int?
  nameInKaren           String?   @db.VarChar(20)
  nameInBurmese         String?   @db.VarChar(20)
  dateOfBirth           DateTime? @db.Date
  fatherName            String?   @db.VarChar(20)
  motherName            String?   @db.VarChar(20)
  gender                String?   @db.VarChar(20)
  nationality           String?   @db.VarChar(20)
  ethnicity             String?   @db.VarChar(20)
  religion              String?   @db.VarChar(20)
  bloodType             String?   @db.VarChar(20)
  typeOfId              String?   @db.VarChar(20)
  idNumber              String?   @db.VarChar(20)
  homeAddress           String?   @db.VarChar(20)
  currentAddress        String?   @db.VarChar(20)
  emergencyContactInfo  String?   @db.VarChar(20)
  placeCodeNo           String?   @db.VarChar(20)
  enrollInKNUDate       DateTime? @db.Date
  employeeCode          String?   @db.VarChar(20)
  gradeLevel            String?   @db.VarChar(20)
  currentContractPeriod Int?
  propationPeriod       Int?
  trainingLevel         String?   @db.VarChar(20)
  workloads             String?   @db.VarChar(20)

  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
  // Relations
  department   Department?  @relation(fields: [departmentId], references: [id])
  job          Job?         @relation(fields: [jobId], references: [id])
  manager      Employee?    @relation("ManagerEmployee", fields: [managerId], references: [id])
  subordinates Employee[]   @relation("ManagerEmployee")
  jobHistory   JobHistory[]
}

model Job {
  id        Int     @id @default(autoincrement())
  code      String?
  jobTitle  String  @db.VarChar(35)
  minSalary Int?
  maxSalary Int?

  // Relations
  employees  Employee[]
  jobHistory JobHistory[]
}

model JobHistory {
  employeeId   Int
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  jobId        Int
  departmentId Int?

  // Relations
  employee   Employee    @relation(fields: [employeeId], references: [id])
  job        Job         @relation(fields: [jobId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])

  // Composite key
  @@id([employeeId, startDate, endDate])
}

model Location {
  id            Int     @id @default(autoincrement())
  streetAddress String?
  postalCode    String?
  city          String
  stateProvince String?
  countryId     Int?

  // Relations
  country     Country?     @relation(fields: [countryId], references: [id])
  departments Department[]
}
