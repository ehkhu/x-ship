// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id        String       @id @default(uuid()) // Use UUID for id
  code      String       @unique
  title     String?
  status    TaskStatus
  label     TaskLabel
  priority  TaskPriority
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Enum definitions
enum TaskStatus {
  todo
  in_progress // Use snake_case or camelCase as appropriate
  done
  canceled
}

enum TaskLabel {
  bug
  feature
  enhancement
  documentation
}

enum TaskPriority {
  low
  medium
  high
}

// Region table
model Region {
  id   Int    @id @default(autoincrement())
  name String
  code      String       @unique
  // One-to-many relationship with Township
  townships Township[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Township table
model Township {
  id       Int    @id @default(autoincrement())
  name     String
  regionId Int // Foreign key reference to Region table

  // Define the relationship with Region
  region Region @relation(fields: [regionId], references: [id])

  // One-to-many relationship with Village
  villages Village[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Village table
model Village {
  id         Int    @id @default(autoincrement())
  name       String
  code      String       @unique
  townshipId Int // Foreign key reference to Township table

  // Define the relationship with Township
  township Township @relation(fields: [townshipId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Department table
model Department {
  id   Int    @id @default(autoincrement())
  name String

  // One-to-many relationship with Position
  positions Position[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Position table
model Position {
  id           Int    @id @default(autoincrement())
  name         String
  departmentId Int? // Nullable foreign key reference to Department table

  // Define the optional relationship with Department
  department Department? @relation(fields: [departmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
